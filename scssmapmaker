#!/bin/bash
set -o nounset
set -o errexit
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR
set -o errtrace
set -o pipefail
DEFAULT_IFS="${IFS}"
SAFER_IFS=$'\n\t'
IFS="${SAFER_IFS}"
_ME=$(basename "${0}")

_print_help() {
  cat <<HEREDOC

#                                                           _             
#                                                          | |            
#    ___  ___ ___ ___ _ __ ___   __ _ _ __  _ __ ___   __ _| | _____ _ __ 
#   / __|/ __/ __/ __|  _   _ \ / _  |  _ \|  _   _ \ / _  | |/ / _ \  __|
#   \__ \ (__\__ \__ \ | | | | | (_| | |_) | | | | | | (_| |   <  __/ |   
#   |___/\___|___/___/_| |_| |_|\__ _|  __/|_| |_| |_|\__ _|_|\_\___|_|   
#                                    | |                                  
#                                    |_|   

Creates a scss file with a single map list based on a sequence of variables.
The resulting map uses the variables name to create a name -> variable pair for looping in scss.

example:
\$color-white: #ffffff; -> "color-white: \$color-white"

Usage:
  ${_ME} input.scss output.scss
  ${_ME} -h | --help
Options:
  -h --help  Show this screen.
HEREDOC
}

###############################################################################
# Program Functions
###############################################################################

_mapmaker() {
  #count the arguments provided and assign them to variables
  if [ $# -lt 1 ]
  then
    echo 1>&2 "$0: no input scss file provided"
    exit 2
  elif [ $# -gt 2 ]
  then
    echo 1>&2 "$0: too many arguments"
    exit 2
  else
    #argument one is the input file
    input="$1"
    #check if a second argument was provided
    if [ $# = 2 ]
    then
      #yes? use it to define output
      output="$2"
    else
      #no? slap "map-" before the input and use that for output
      output="map-$input"
    fi
  fi

  #use that output name to name the map
  mapname="${output%.*}"
  #get the number of lines in the input file
  linecount=$(grep -c "" "$input")
  #make a global counter
  counter=1

  #print out the beginning of the map
  echo "\$$mapname: (" >>$output

  #make sure that at least an input file was provided
  if [ -n "$1" ]
  then
    #loop through the file
    while IFS= read -r line || [ -n "$line" ];
    do
      #first, cut at the dollar sign and grab the rest
      firstcut=$(echo $line | cut -d'$' -f 2 -s)
      #if it isn't empty
      if [ -n "$firstcut" ]
      then
        #cut at the colon and grab the first part
        secondcut=$(echo $firstcut | cut -d':' -f 1)
        #checks if were at the last line or not
        if [ "$counter" -lt "$linecount" ]
        then
          #print the label -> variable pair
          echo -e "\t\"$secondcut\" : \$$secondcut," >>$output
        else
          #print the label -> variable pair without a comma because it's at the end
          echo -e "\t\"$secondcut\" : \$$secondcut" >>$output
        fi
      fi
      #bump the counter up
      counter=$(expr $counter + 1)
    done < "$input"
  else
    #if $1 isn't provided, just echo an error
    echo "Input scss file required"
  fi

  #close the map
  echo ");" >>$output
}

###############################################################################
# Main
###############################################################################

_main() {
  if [[ "${1:-}" =~ ^-h|--help$  ]]
  then
    _print_help
  else
    _mapmaker "$@"
  fi
}


_main "$@"